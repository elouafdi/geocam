#summary Description of the Approximator class and how to run a curvature flow.
#labels Featured

= Approximator =

  == Description ==
  The Approximator class is the shell for running a curvature flow. The class provides the functionality to determine what system of differential equations to use, how to perform a step, and even which values to record for later use. The system is provided by the user at run-time and is defined to be a function that takes in an empty array of `double`s and fills the array with the values calculated in the system of equations. The Approximator class is abstract with an abstract method `step`. A class that extends Approximator implements `step` with the method of approximation to use (i.e Euler's method). Lastly, the Approximator stores values after each `step` of a flow according to which values were requested at construction. Values include radii, curvatures, areas, and volumes. These histories can then be accessed directly from the Approximator object.
 
  == Constructor ==
  The constructor takes in a function that defines a system of differential equations and a string of characters representing what histories to record. For the function to be a `sysdiffeq` it must nto return a value and its only paramter is an array of doubles that will be filled in with values after the function completes. The string must be nul-terminated and consisting of only valid characters. The valid characters are:
   * R - Record radii
   * 2 - Record two-dimensional curvatures
   * 3 - Record three-dimensional curvatures
   * A - Record areas
   * V - Record volumes
  One cannot list both two- and three-dimensional curvatures.

  {{{
  typedef void (*sysdiffeq)(double derivs[]);
  Approximator(sysdiffeq funct, char* histories);
  }}}

  == Variables ==

  == Functions ==
    * [Functions#run run]
    * step
    * recordState