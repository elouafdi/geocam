#This module describes how to use the procedures in the miscmath module to obtain labelings of portions of a triangulation.

= Description =

To perform a calculation on a triangulation, one invariably has to inspect the topology of that triangulation. Such an inspection often involves examining all the simplices associated with a particular region of the triangulation, and examining how they are connected to each other. For example, given a face, we might like to know the edges and vertices of that face, how they are positioned with respect to each other on the face. This module provides a convenient way to address these questions.

= Procedure Definitions =
  * `StdEdge labelEdge(Edge& e, Vertex& v)`
  * `StdFace labelFace(Face& f, Vertex& v)`
  * `StdFace labelFace(Face& f, Edge& e)`
  * `StdTetra labelTetra(Tetra& t, Edge& e)`
  * `StdTetra labelTetra(Tetra& t, Vertex& v)`
  * `StdTetra labelTetra(Tetra& t, Face& f)`
  * `StdTetra labelTetra(Tetra& t)`

Each procedure (with the exception of the last) answers the following request: "Label Simplex A with respect to Simplex B," subject to the requirement that Simplex B is of lower dimension than Simplex A, and Simplex B is adjacent to Simplex A "

Currently, we describe a labeling as a `struct` of integers. Each integer can be thought of as a reference to a particular simplex---used in the appropriate "Triangulation::<Simplex>Table" data structure, one can obtain a reference to an actual simplex object.

For example, below is the definition for a labeled face:
{{{
struct stand_psn_face{
int v1;
int v2;
int v3;

int e12;
int e13;
int e23;
};
typedef stand_psn_face StdFace;
}}}

The integers `v1`, `v2`, and `v3` each represent a vertex in Triangulation::vertexTable. Likewise, `e12` represents an edge in Triangulation::edgeTable, and this edge has as its endpoints the vertices represented by v1 and v2. The other structures, `StdEdge` and `StdTetra` are analogous.

Finally, we should explain what is meant by "with respect to" in the phrase "Label Simplex A with respect to Simplex B." Depending on the dimension of Simplex B, the chosen labeling procedure makes sure that the integer `v1`, `e12`, or `f123` (as appropriate) references Simplex B. In some cases, this will mean that other positions in the labeling are ambiguous. For example, if we used labelTetra( Tetra& t, Edge& e ) to label a tetrahedron with respect to one of its edges, then we could exchange vertices 1 and 2 and maintain a correct labeling---we only insist that e12 denotes our chosen edge, and that the labeling is consistent with the tetrahedron's topology.
 
= Details =
All of the procedures in this module work in constant time.

= To Do =
1) There is currently no error checking in this module; the results of labeling one simplex with respect to a non-adjacent simplex is not defined.
2) It isn't totally clear that this module will necessarily cover "unusual boundary cases" such as a face with only one or two vertices. 